#-------------------------------------------------------------------------------
# Name:       SolidSenseService
# Purpose:    Initial configuration of the gateway
#
# Author:      Laurent Carré
#
# Created:     22/11/2019
# Copyright:   (c) Laurent Carré Sterwen Technologies 2019
# Licence:     <your licence>
#-------------------------------------------------------------------------------

import yaml
import json
import sys
import os
import logging
import subprocess
import platform
import datetime

from SolidSenseService import *
from PppService import *
from provisioning_utils import *

servlog=logging.getLogger('SolidSense-provisioning')

kgc=None


def genconfigfile(template,output_file):
    '''
    Generate a configuration file from template
    Replace the keyword/variables in the file by actual values
    variables are identified as $!-----!$ The keyword is the string between the '!' and ending $
    Only one variable per line
    '''

    global kgc

    try:
        ft=open(template,'r')
    except IOError as err:
        servlog.error("SolidSense provisioning file:"+template+" "+str(err))
        return
    try:
        fo=open(output_file,'w')
    except:
        servlog.error("SolidSense provisioning file:"+output_file+" "+str(err))
        return
    #
    #  generate the header
    #
    fo.write("# Generated by SolidSense provisioning system on ")
    t_str=datetime.datetime.now().isoformat()
    fo.write(t_str+'\n')
    #
    #  now loop on template
    #
    line_n=0
    for line in ft:
        line_n += 1
        # pass through comments
        if line[0] == '#' or line[0]=='\n' :
            fo.write(line)
            continue
        kds=line.find('$!')
        if kds == -1 :
            fo.write(line)
            continue
        ks = kds + 2
        ke = line.find('!$',ks)
        if ke == - 1 :
            servlog.error("SolidSense provisioning file:"+template+" line:"+str(line_n)+" Keyword syntax error")
            continue
        if ke - ks < 1 :
            servlog.error("SolidSense provisioning file:"+template+" line:"+str(line_n)+" Keyword syntax error")
            continue
        keyword=line[ks:ke]
        # print (keyword)
        fo.write(line[:kds])
        fo.write(kgc.get_keyword(keyword))
        fo.write('\n')
        # next line


    ft.close()
    fo.close()









class GlobalKuraConfig:
    '''
    This class shall generate all files for the kura configuration
    snapshot_0.xml
    kura_custom.properties
    kuranet.conf
    '''
    snapshot_sections = ["header", "firewall", "net", "watchdog", "clock",
                         "H2Db", "mqtt", "data", "position", "cloud", "ssl"]
    process_section = {
        "header": False, "firewall": False, "net": True, "watchdog": False,
        "clock": False, "H2Db": False, "mqtt": True, "data":False,
        "position": False, "cloud": False, "ssl": False}


    def __init__(self,template_dir,config_dir):
        self._keywords={}
        self._services={}
        self._plugins=[]
        self._pppIf=False
        self._template_dir=template_dir
        self._config_dir=config_dir
        if isWindows() :
            self.simul_rpmb()
        else:
            self.rpmb_conf()
            self.mender_conf()
        self.read_model_file()
        self.set_internal_keywords()


    def rpmb_config(self):
        fd = open("/etc/solidsense_device")
        for line in fd:
        #print line
            ls = line.split('=')
            if ls[0] == "PART":
                self._partnum = ls[1].strip()
            elif ls[0] == "SERIAL":
                self._sernum = ls[1].strip()
            elif ls[0] == "PRODUCT":
                self._prodid = ls[1].strip()
        fd.close()
        self._model = (self._partnum.split('.'))[0]

    def mender_conf(self):
        fd=open("/etc/mender/artifact_info","r")
        line=fd.read()
        eqid=line.index('=')
        self._firmware= line[eqid+1:len(line)-1]
        fd.close()

    def simul_rpmb(self):
        self._sernum="ZZ191100001"
        self._partnum="SRG0000.00"
        self._prodid="FAKEONE"
        self._model="SRG0000"
        self._firmware="SolidSense-V0.999"

    def set_internal_keywords(self):
        self.set_keyword("DEVICE-ID", self._sernum)
        self.set_keyword("SERIAL-NUM",self._sernum)
        self.set_keyword("PART-NUM",self._partnum)
        self.set_keyword("MODEL-ID",self._model)
        self.set_keyword("FIRMWARE",self._firmware)
        self.set_keyword("MODEL-NAME",self.get_model_name(self._model))

    def read_model_file(self):
        fname= "SolidSense-configurations.yml"
        fname= os.path.join(self._config_dir,fname)
        # print (fname )
        self._conf_def=None
        try:
            fd=open(fname)
        except IOError as err:
            servlog.error("SolidSense provisioning - "+fname+" "+str(err))
            return
        try:
            conf_def=yaml.load(fd,Loader=yaml.FullLoader)
        except yaml.YAMLError as err:
            servlog.error("SolidSense provisioning - "+fname+" syntax error"+str(err))
            return
        self._conf_def=conf_def

    def get_model_name(self,model):
        if self._conf_def != None :
            return self._conf_def.get(model,"Unkown SolidSense hardware configuration")
        else:
            return "Error in configuration definition file"



    def set_keyword(self,keyword,value):
        self._keywords[keyword]=value

    def get_keyword(self,key):
        try:
            value=self._keywords[key]
        except KeyError :
            servlog.error("SolidSense provisioning - keyword not defined:"+key)
            value="*******"
        return value

    def add_service(self,s_name,service):
        self._services[s_name]=service

    def add_plugin(self,plugin_file) :
        if plugin_file not in self._plugins :
            self._plugins.append(plugin_file)

    def gen_snapshot0(self):

        # self.dump_keywords()
        if isWindows() :
            output_dir=dir='.'
        else:
            output_dir='/opt/eclipse/kura/user/snapshots'

        outputname = os.path.join(output_dir,"snapshot_0.xml" )

        try:
            fo = open(outputname, "w")
        except IOError as err:
            servlog.error("SolidSense provisioning - "+outputname+" "+str(err))
            return
        nbline = 0
        for section in GlobalKuraConfig.snapshot_sections:
            section_v = section
            if section == "net":
                if self._pppIf:
                    section_v = "net-ppp"
            filename = os.path.join(self._template_dir,"kura","snapshot0-elements","snapshot_0-"+section_v+".xml")
            try:
                ft = open(filename, "r")
            except IOError as err:
                servlog.error("SolidSense provisioning - "+filename+" "+str(err))
                return
            for line in ft:
                if GlobalKuraConfig.process_section[section]:
                    line_w = self.xml_replace_keywords(line)
                else:
                    line_w = line
                fo.write(line_w)
                nbline = nbline+1
            fo.write("\n")
            nbline = nbline+1
            ft.close()
        # write footer
        fo.write("</esf:configurations>\n")
        fo.close()

        servlog.info("SolidSense provisioning generated:"+ outputname+"with:"+str( nbline)+  "lines")

    def xml_replace_keywords(self,line):
        '''
        replace the keyword in one xml line
        limitation => one keyword per line
        '''
        stindex = line.find("##KEYWORD##")
        if stindex == -1:
            return line
        outputline = line[:stindex]
        stindex = stindex+11
        lastindex = line.find("</esf:value>", stindex)
        if lastindex == -1:
            servlog.error("SolidSense provisioning - error in xml template: "+line )
            return line
        keyword = line[stindex:lastindex]
        value=self.get_keyword(keyword)
        if type(value) != str :
            value=str(value)
        outputline = outputline+value+line[lastindex:]
        return outputline

    def add_snapshot_0_element(self,e_name,process=True):
        if e_name not in GlobalKuraConfig.snapshot_sections :
            GlobalKuraConfig.snapshot_sections.append(e_name)
            GlobalKuraConfig.process_section[e_name]=process

    def gen_configuration(self):
        '''
        generate the configuration for all services
        each service is reposnible its own configuration files
        then global kura configuration files are generated
        snapshot_0.xml
        kura_custom.properties
        kuranet.conf
        '''
        for service in self._services.values() :
            service.configuration(self)

        self.gen_snapshot0()
        self.gen_properties()
        self.gen_netconf()

    def gen_properties(self):
        tmpl=os.path.join(self._template_dir,"kura","kura_custom.properties.tmpl")
        if isWindows :
            out = "kura_custom.properties"
        else:
            out= os.path.join("/opt/eclipse/kura/user","kura_custom.properties")
        genconfigfile(tmpl,out)

    def gen_netconf(self):
        pass

    def dump_keywords(self):
        for item in self._keywords.items() :
            print(item[0],'=',item[1])



######################################################################
#  End GlobalKuraConfig Class
######################################################################


services_class = {
    "KuraService":KuraService,
    "WiFiService": WiFiService,
    "PppService": PppService,
    "WirepasSink": WirepasSink,
    "WirepasTransport": WirepasTransport}

def read_service_def(kgc_o,serv_file):
    '''
    Read the service definition file
    '''

    try:
        fd=open(serv_file)
    except IOError as err:
        servlog.error("SolidSense provisioning - cannot open file:"+serv_file+" "+str(err))
        return
    try:
        res=yaml.load(fd,Loader=yaml.FullLoader)
    except yaml.YAMLError as err:
         servlog.error("SolidSense provisioning - service file:"+serv_file+" syntax error"+str(err))
         return
    # print (res)
    for s in res:
        service_def=s.get('service')
        # print ("Instanciating:", service_def.get('type'))
        try:
            service_class_name=service_def['type']
        except KeyError :
            servlog.error("SolidSense provisioning - missing type")
            continue
        try:
            service_name=service_def['name']
        except KeyError :
            servlog.error("SolidSense provisioning - missing name")
            continue
        try:
            service_class=services_class[service_class_name]
        except KeyError:
            servlog.error("SolidSense provisioning - Unknown service:"+service_class_name)
            continue
        service=service_class(service_def)
        print("Class",service_class_name," instance:",service.name())
        kgc_o.add_service(service_name,service)


def main():
    template_dir='C:\\Users\\laure\\Sterwen-Tech\\Git-SolidRun\\SolidSense-V1\\template'
    config_dir='C:\\Users\\laure\\Sterwen-Tech\\Git-SolidRun\\SolidSense-V1\\config'
    global kgc
    kgc=GlobalKuraConfig(template_dir,config_dir)
    serv_file=os.path.join(config_dir,"test1.yml")
    read_service_def(kgc,serv_file)

    # test keyword replacement
    # genconfigfile("kura_custom.properties.tmpl","kura_custom.properties")
    kgc.gen_configuration()

if __name__ == '__main__':
    main()
