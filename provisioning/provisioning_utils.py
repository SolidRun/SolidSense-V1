#-------------------------------------------------------------------------------
# Name:        provisioning_utils
# Purpose:
#
# Author:      Laurent
#
# Created:     27/11/2019
# Copyright:   (c) Laurent CarrÃ© Sterwen Technologies 2019
# Licence:     Eclipse Public License 1.0
#-------------------------------------------------------------------------------

import platform
import os
import subprocess
import sys
import datetime
import logging

servlog=logging.getLogger('SolidSense-provisioning')


def isWindows():
    pl_str=platform.platform()
    # print("System platform:",pl_str)
    return pl_str.startswith('Windows')


def systemCtl(action, service):
    args=['systemctl']
    args.append(action)
    args.append(service)
    servlog.info('Executing:'+str(args))
    try:
        c=subprocess.run(args,stderr=sys.stderr)
    except Exception as e:
        servlog.error("Systemctl error:"+str(e))
        return -1
    servlog.info('result:'+str(c))
    return c.returncode


def readSinkStatus(service):
    try:
        proc=subprocess.Popen(['systemctl','status', service], stdout=subprocess.PIPE,encoding="utf-8")
    except OSError as err:
        servlog.critical(str(err))
        return False

    active=False

    for line in proc.stdout :
        # print (line)
        # analyse
        act=line.find("Active:")
        if act > 0 :
            start= act+len("Active:")
            res=line[start:].split()
            servlog.info("Service "+service+" "+res[0]+res[1])
            if res[0] == 'active' and res[1] == '(running)':
                active=True

    proc.wait()
    return active


def checkCreateDir(dir) :
    if isWindows():
        return
    if os.path.lexists(dir):
        # ok the file exist
        if not os.path.isdir(dir):
            # normal file need to remove it
            os.remove(dir)
            os.mkdir(dir)
    else:
        os.mkdir(dir)
    # adjust mode in all cases
    os.chmod(dir, 0o777)

def checkAndRemoveFile(dir,file):
    if os.path.lexists(dir):
        path=os.path.join(dir,file)
        if os.path.lexists(path):
            os.remove(path)

def fileExists(dir,file):
    if os.path.lexists(dir):
       path=os.path.join(dir,file)
       if os.path.lexists(path):
           return True
    return False 


def write_header(fd):
    t=datetime.datetime.now()
    header=t.strftime("# Generated by SolidSense provisioning system on %d-%b-%Y %H:%M:%S\n")
    fd.write(header)


def str2bool(s):
    if s == 'true':
        return True
    elif s == 'false':
        return False
    else:
        raise ValueError


def bool2str(b):
    if b:
        return 'true'
    else :
        return 'false'


def checkWirepasSink(tty,sink):

    r=subprocess.run(['wp-get-fw-version',tty],capture_output=True)
    if r.returncode != 0 :
        servlog.info('No Wirepas firmware running on:'+ sink)
        servlog.info(r.stderr.decode('utf-8').rstrip('\n'))
        return False
    else:
        lines=r.stdout.decode('utf-8').split('\n')
        servlog.info(lines[3])
        return True


def main():
    # res=systemCtl(sys.argv[1],sys.argv[2])
    res=readSinkStatus(sys.argv[2])
    if res:
        print("service", sys.argv[2], "is active")


if __name__ == '__main__':
    main()
